(define (domain AllOut)
(:predicates
	(light ?r ?c )
	(up ?r ?c)
	(down ?r ?c)
	(left ?r ?c)
	(right ?r ?c)
	(next-r ?r ?r)
	(next-c ?c ?c)
)

  (:action light-on
    :parameters (?r ?c ?prev-r ?next-r ?prev-c ?next-c )
    :precondition (and (not (light ?r ?c))
	    		(not (up ?r ?c))
	    		(not (down ?r ?c))
	    		(not (right ?r ?c))
	    		(not (left ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c)
    			(next-c ?c ?next-c ))
    :effect (and (light ?r ?c) 
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
	)
	

  (:action light-off 
    :parameters (?r ?c ?prev-r ?next-r ?prev-c ?next-c )
    :precondition (and (light ?r ?c)
    	    	(not (up ?r ?c))
	    		(not (down ?r ?c))
	    		(not (right ?r ?c))
	    		(not (left ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c)
    			(next-c ?c ?next-c ))
    :effect (and (not (light ?r ?c))
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )
  
  (:action light-off-line-up 
    :parameters (?r ?c ?prev-c ?next-r ?next-c )
    :precondition (and (light ?r ?c)
    			(up ?r ?c)
    			(not (down ?r ?c))
    			(not (left ?r ?c))
    			(not (right ?r ?c))
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c)
    			(next-c ?c ?next-c ))
    :effect (and (not (light ?r ?c))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )
  
    (:action light-on-line-up 
    :parameters (?r ?c ?prev-c ?next-r ?next-c )
    :precondition (and (not (light ?r ?c))
    			(up ?r ?c)
    			(not (down ?r ?c))
    			(not (left ?r ?c))
    			(not (right ?r ?c))
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c)
    			(next-c ?c ?next-c ))
    :effect (and (light ?r ?c)
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )
  
    (:action light-off-line-down
    :parameters (?r ?c ?prev-c ?prev-r ?next-c )
    :precondition (and (light ?r ?c)
    			(down ?r ?c)
    			(not (up ?r ?c))
    			(not (left ?r ?c))
    			(not (right ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?prev-c ?c)
    			(next-c ?c ?next-c ))
    :effect (and (not (light ?r ?c))
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )
  
  (:action light-on-line-down
    :parameters (?r ?c ?prev-c ?prev-r ?next-c )
    :precondition (and (not (light ?r ?c))
    			(down ?r ?c)
    			(not (up ?r ?c))
    			(not (left ?r ?c))
    			(not (right ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?prev-c ?c)
    			(next-c ?c ?next-c ))
    :effect (and (light ?r ?c)
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )

  (:action light-off-line-left
    :parameters (?r ?c ?next-r ?prev-r ?next-c )
    :precondition (and (light ?r ?c)
    			(left ?r ?c)
    			(not (up ?r ?c))
    			(not (down ?r ?c))
    			(not (right ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?c ?next-c )
    			(next-r ?r ?next-r ))
    :effect (and (not (light ?r ?c))
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
		)
  )
  
  (:action light-on-line-left
    :parameters (?r ?c ?next-r ?prev-r ?next-c )
    :precondition (and (not (light ?r ?c))
    			(left ?r ?c)
    			(not (up ?r ?c))
    			(not (down ?r ?c))
    			(not (right ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?c ?next-c )
    			(next-r ?r ?next-r ))
    :effect (and (light ?r ?c)
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
		)
  )

  (:action light-off-line-right
    :parameters (?r ?c ?next-r ?prev-r ?prev-c)
    :precondition (and (light ?r ?c)
    			(right ?r ?c)
    			(not (up ?r ?c))
    			(not (down ?r ?c))
    			(not (left ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c))
    :effect (and (not (light ?r ?c))
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
		)
  )

  (:action light-on-line-right
    :parameters (?r ?c ?next-r ?prev-r ?prev-c)
    :precondition (and (not (light ?r ?c))
    			(right ?r ?c)
    			(not (up ?r ?c))
    			(not (down ?r ?c))
    			(not (left ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c))
    :effect (and (light ?r ?c)
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
		)
  )
  
  (:action light-off-corner-up-left
    :parameters (?r ?c ?next-r ?next-c )
    :precondition (and (light ?r ?c)
    			(up ?r ?c)
    			(left ?r ?c)
    			(not (right ?r ?c))
    			(not (down ?r ?c))
    			(next-r ?r ?next-r )
    			(next-c ?c ?next-c ))
    :effect (and (not (light ?r ?c))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )
  
   (:action light-on-corner-up-left
    :parameters (?r ?c ?next-r ?next-c )
    :precondition (and (not (light ?r ?c))
    			(up ?r ?c)
    			(left ?r ?c)
    			(not (right ?r ?c))
    			(not (down ?r ?c))
    			(next-r ?r ?next-r )
    			(next-c ?c ?next-c ))
    :effect (and (light ?r ?c)
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )
  
   (:action light-off-corner-up-right
    :parameters (?r ?c ?next-r ?prev-c)
    :precondition (and (light ?r ?c)
    			(up ?r ?c)
    			(right ?r ?c)
    			(not (left ?r ?c))
    			(not (down ?r ?c))
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c))
    :effect (and (not (light ?r ?c))
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
		)
  )
  
   (:action light-on-corner-up-right
    :parameters (?r ?c ?next-r ?prev-c)
    :precondition (and (not (light ?r ?c))
    			(up ?r ?c)
    			(right ?r ?c)
    			(not (left ?r ?c))
    			(not (down ?r ?c))
    			(next-r ?r ?next-r )
    			(next-c ?prev-c ?c))
    :effect (and (light ?r ?c)
    		(when (light ?next-r ?c) (not (light ?next-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (not (light ?next-r ?c)) (light ?next-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
		)
  )
  
  (:action light-off-corner-down-right
    :parameters (?r ?c ?prev-r ?prev-c)
    :precondition (and (light ?r ?c)
    			(down ?r ?c)
    			(right ?r ?c)
    			(not (left ?r ?c))
    			(not (up ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?prev-c ?c))
    :effect (and (not (light ?r ?c))
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
		)
  )

  (:action light-on-corner-down-right
    :parameters (?r ?c ?prev-r ?prev-c)
    :precondition (and (not (light ?r ?c))
    			(down ?r ?c)
    			(right ?r ?c)
    			(not (left ?r ?c))
    			(not (up ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?prev-c ?c))
    :effect (and (light ?r ?c)
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?prev-c) (not (light ?r ?prev-c)))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?prev-c)) (light ?r ?prev-c))
		)
  )
  
  (:action light-off-corner-down-left
    :parameters (?r ?c ?prev-r ?next-c )
    :precondition (and (light ?r ?c)
    			(down ?r ?c)
    			(left ?r ?c)
    			(not (right ?r ?c))
    			(not (up ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?c ?next-c ))
    :effect (and (not (light ?r ?c))
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  )  

  (:action light-on-corner-down-left
    :parameters (?r ?c ?prev-r ?next-c )
    :precondition (and (not (light ?r ?c))
    			(down ?r ?c)
    			(left ?r ?c)
    			(not (right ?r ?c))
    			(not (up ?r ?c))
    			(next-r ?prev-r ?r)
    			(next-c ?c ?next-c ))
    :effect (and (light ?r ?c)
    		(when (light ?prev-r ?c) (not (light ?prev-r ?c)))
    		(when (light ?r ?next-c ) (not (light ?r ?next-c )))
    		(when (not (light ?prev-r ?c)) (light ?prev-r ?c))
    		(when (not (light ?r ?next-c )) (light ?r ?next-c ))
		)
  ) 
   				  
)
